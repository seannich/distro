#!/usr/bin/env python
import xml.etree.ElementTree as etree
import json

import boinc_path_config
from Boinc import work_generator, database
from Boinc.create_work import create_work


class CollatzWorkGenerator(work_generator.WorkGenerator, object):
    def __init__(self):
        super(CollatzWorkGenerator, self).__init__("collatz")
        self.start_from = 10000
        self.num_numbers = 10000

        database.connect()
        dbconnection = database.get_dbconnection()
        self.cursor = dbconnection.cursor()

    def get_command_line(self, xml):
        command_line_tag = etree.fromstring(xml).find(".//command_line")
        return command_line_tag.text.strip()

    def get_last_upper_bound(self):
        self.cursor.execute("SELECT create_time, xml_doc FROM workunit "
                            "ORDER BY create_time DESC "
                            "LIMIT 1;")

        row = self.cursor.fetchone()

        if row is not None:
            command_line = self.get_command_line(row["xml_doc"])
            return json.loads(command_line)["max"]
        else:
            return self.start_from

    def make_jobs(self, num=1):
        last_upper_bound = self.get_last_upper_bound()
        for _ in range(num):
            command_line = {
                "min": last_upper_bound,
                "max": last_upper_bound + self.num_numbers,
            }

            args = {
                "command_line": json.dumps(command_line),
            }

            create_work(self.appname, args, [])

            last_upper_bound += self.num_numbers


if __name__ == "__main__":
    work_generator = CollatzWorkGenerator()
    work_generator.run()
